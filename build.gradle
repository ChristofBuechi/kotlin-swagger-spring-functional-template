buildscript {
    ext {
        kotlinVersion = '1.2.51'
        springBootVersion = '2.0.5.RELEASE'
        distName = "kotlin-swagger-spring-functional-template"
        distVersion = '1.2.3'
    }
    repositories {
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.2")
        classpath("org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2")
    }
}

apply plugin: "java"
apply plugin: 'kotlin'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: "com.github.kt3k.coveralls"

mainClassName = 'functional.ApplicationKt'

version = distVersion
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    ktlint
}

jar {
    manifest {
        attributes 'Main-Class': 'functional.ApplicationKt'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }
}

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile 'io.github.cdimascio:java-dotenv:3.1.3'
    compile 'io.github.cdimascio:openapi-spring-webflux-validator:1.0.1'

    compile("org.springframework:spring-webflux")
    compile("org.springframework:spring-context")
    compile("org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}")

    compile("io.projectreactor.ipc:reactor-netty")

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6"

    compile("org.slf4j:slf4j-api")
    compile("ch.qos.logback:logback-classic")

    runtime files('src/main/resources')

    testCompile("io.projectreactor:reactor-test")
    testCompile("org.junit.jupiter:junit-jupiter-api")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")

    ktlint "com.github.shyiko:ktlint:0.23.1"
}

task unzip(type: Copy) {
    def zipFile = file("build/distributions/${distName}-${distVersion}.zip")
    def outputDir = file("${buildDir}/unpacked/dist")

    from zipTree(zipFile)
    into outputDir
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}